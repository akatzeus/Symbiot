//Download dataset
!pip install -q kaggle

# Upload your kaggle.json API key first
from google.colab import files
files.upload()

# Move to correct folder
!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Download dataset
!kaggle datasets download -d emmarex/plantdisease
!unzip plantdisease.zip -d plant_disease_data


//Preprocess and augment data
import os
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Set paths
data_dir = "plant_disease_data/PlantVillage"
img_size = (128, 128)
batch_size = 32

# Train/Validation split
datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2,
    rotation_range=20,
    zoom_range=0.2,
    horizontal_flip=True,
)

train_data = datagen.flow_from_directory(
    data_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='categorical',
    subset='training',
)

val_data = datagen.flow_from_directory(
    data_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation',
)

# Save labels
labels = list(train_data.class_indices.keys())
with open("labels.txt", "w") as f:
    for label in labels:
        f.write(f"{label}\n")


//Build and train CNN model
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(128,128,3)),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.3),
    Dense(len(labels), activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

history = model.fit(train_data, validation_data=val_data, epochs=10)


//Evaluate and convert to TFLite
model.save("leaf_disease_model")


//Save labels.txt for predictions
converter = tf.lite.TFLiteConverter.from_saved_model("leaf_disease_model")
tflite_model = converter.convert()

with open("leaf_disease_model.tflite", "wb") as f:
    f.write(tflite_model)
